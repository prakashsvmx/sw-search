{"version":3,"sources":["service/Constants.js","service/AuthService.js","service/PlanetService.js","components/PlanetInfo/PlanetInfo.js","components/PlanetList/PlanetList.js","components/Home/Home.js","components/Login/Login.js","components/AuthRoute/AuthRoute.js","App.js","serviceWorker.js","index.js"],"names":["API_CONSTANTS","PEOPLE","PLANETS","AuthService","authUser","sessionStorage","getItem","JSON","parse","removeItem","userName","password","axios","get","encodeURIComponent","loginResult","results","data","userInfo","length","res","name","birth_year","birthYear","setItem","stringify","PlanetService","searchText","page","pageCriteria","url","searchResults","PlanetInfo","info","population","rotation_period","orbital_period","climate","gravity","terrain","surface_water","residents","films","size","toLowerCase","Math","round","Number","parseInt","OverlayTrigger","trigger","key","placement","rootClose","rootCloseEvent","overlay","Popover","id","Title","as","Content","style","display","flexFlow","Planet","color","PlanetList","list","Jumbotron","Row","map","item","Col","Home","state","planetsData","fetchCount","isLoading","currentPage","setSearchText","e","value","target","setState","prevState","Date","initFetch","timeDiffInMinutes","dt2","dt1","diff","getTime","abs","isValidFetch","fetchPlanets","a","searchPlanets","setPage","pageNumber","this","props","logout","currentUser","previous","next","className","to","href","onClick","Form","inline","InputGroup","Prepend","Text","role","FormControl","type","onChange","placeholder","diplay","alignItems","justifyContent","margin","width","Pagination","Prev","Next","React","Component","Login","history","useState","setUserName","setPassword","loading","setLoading","handleSubmit","preventDefault","login","console","log","push","marginTop","onSubmit","AuthRoute","component","rest","render","getUserInfo","pathname","from","location","createBrowserHistory","App","updateUserInfo","prevProps","snapshot","exact","path","Boolean","window","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1909257b.chunk.js","sourcesContent":["const SWAPI_URL='https://swapi.co/api';\nexport const API_CONSTANTS ={\n   PEOPLE:`${SWAPI_URL}/people`,\n   PLANETS:`${SWAPI_URL}/planets`,\n};\n\nexport default API_CONSTANTS;","import axios from 'axios';\nimport API_CONSTANTS from \"../service/Constants\";\n\nconst sessionKey = 'userInfo';\n\nclass AuthService {\n    static getUserInfo() {\n        const authUser = sessionStorage.getItem(sessionKey);\n        if (authUser) {\n            return JSON.parse(authUser);\n        }\n        return authUser;\n    }\n\n    static logout() {\n        sessionStorage.removeItem(sessionKey);\n        return null;\n    }\n\n    static async login({\n                           userName,\n                           password\n                       }) {\n\n        const loginResult = await axios.get(`${API_CONSTANTS.PEOPLE}?name=${encodeURIComponent(userName)}`);\n        const {\n            data: {\n                results\n            }\n        } = loginResult;\n        let userInfo = null;\n        if (results.length) {\n\n            for (let res = 0; res < results.length; res += 1) {\n                const {\n                    name,\n                    birth_year\n                } = results[res];\n\n                if (birth_year === password && name === userName) {\n                    userInfo = {\n                        name: name,\n                        birthYear: birth_year\n                    };\n                    sessionStorage.setItem(sessionKey, JSON.stringify(userInfo))\n                }\n            }\n        }\n\n        return userInfo;\n\n    }\n}\n\n\nexport default AuthService;","import axios from 'axios';\nimport API_CONSTANTS from \"../service/Constants\";\n\nclass PlanetService {\n    static async searchPlanets({\n                                   searchText,\n                                   page,\n                               }) {\n\n        const pageCriteria = page ? `&page=${page}` : '';\n        const url =`${API_CONSTANTS.PLANETS}?search=${encodeURIComponent(searchText)}${pageCriteria}`;\n        const {data: searchResults} = await axios.get(url);\n        return searchResults;\n\n    }\n}\n\n\nexport default PlanetService;","import React from 'react';\nimport {Planet} from 'react-kawaii';\nimport {OverlayTrigger, Popover} from 'react-bootstrap';\n\nconst PlanetInfo = ({info}) => {\n    const {\n        name,\n        population,\n        rotation_period,\n        orbital_period,\n        climate,\n        gravity,\n        terrain,\n        surface_water,\n\n        residents,\n        films,\n    } = info;\n    let size = 20;\n    if (`${population}`.toLowerCase() !== 'unknown') {\n        size = Math.round(Number.parseInt(population) / 10000000);\n        size = size < 20 ? 20 : size;\n        size = size > 100 ? 100 : size;\n    }\n\n    return (\n        <OverlayTrigger\n            trigger=\"click\"\n            key={name}\n            placement={\"right\"}\n            rootClose\n            rootCloseEvent={\"mousedown\"}\n            overlay={\n                <Popover id={`popover-positioned-${name}`} rootClose rootCloseEvent={\"mousedown\"}>\n                    <Popover.Title as=\"h3\">{name}</Popover.Title>\n                    <Popover.Content>\n                        <div style={{display: 'flex', flexFlow: 'column'}}>\n                            <span>Rotation period: {rotation_period}</span>\n                            <span>Orbital period : {orbital_period}</span>\n                            <span>Climate : {climate}</span>\n                            <span> Gravity : {gravity}</span>\n                            <span>Terrain : {terrain}</span>\n                            <span>Surface Water: {surface_water}</span>\n                            <span>{residents.length} Resident(s)</span>\n                            <span>{films.length} Film(s)</span>\n                        </div>\n                    </Popover.Content>\n                </Popover>\n            }\n        >\n            <div>\n                <Planet size={size} color=\"#FDA7DC\"/>\n                {name}\n            </div>\n        </OverlayTrigger>\n\n\n    )\n};\n\nexport default PlanetInfo;","import React from 'react';\nimport PlanetInfo from \"../../components/PlanetInfo\";\nimport {Jumbotron} from 'react-bootstrap';\n\nimport {Row, Col} from \"react-bootstrap\";\n\nconst PlanetList = ({list = []}) => {\n    return (\n        <Jumbotron>\n            <Row>\n                {list.map((item) => {\n\n                    return (\n                        <Col>\n                            <PlanetInfo info={item}/>\n                        </Col>\n                    )\n                })\n                }\n            </Row>\n        </Jumbotron>\n    )\n\n};\n\nexport default PlanetList;","import React from 'react';\nimport {Link} from \"react-router-dom\";\nimport PlanetService from \"../../service/PlanetService\";\nimport PlanetList from \"../../components/PlanetList\";\nimport * as PropTypes from \"prop-types\";\nimport {Jumbotron, Form, FormControl, InputGroup, Pagination} from 'react-bootstrap';\n// import AuthService from \"../../service/AuthService\";\n\nclass Home extends React.Component {\n    state = {\n        planetsData: {},\n        searchText: \"\",\n        fetchCount: 0,\n        isLoading: false,\n        currentPage: 1\n    };\n\n    setSearchText = (e) => {\n\n        const value = e.target.value;\n        this.setState((prevState) => {\n\n            const fetchCount = prevState.fetchCount + 1;\n            sessionStorage.setItem('fetchCount', fetchCount);\n            if (fetchCount === 1) {\n                sessionStorage.setItem('lastFetchTime', new Date());\n            }\n            return {\n                searchText: value,\n                fetchCount: fetchCount\n            }\n        }, this.initFetch)\n    };\n\n    timeDiffInMinutes = (dt2, dt1) => {\n\n        let diff = (dt2.getTime() - dt1.getTime()) / 1000;\n        diff /= 60;\n        return Math.abs(Math.round(diff));\n\n    }\n\n    isValidFetch = () => {\n       /* const fetchCount = sessionStorage.setItem('fetchCount');\n        const lastFetchTime = sessionStorage.setItem('lastFetchTime');\n         const userInfo = AuthService.getUserInfo();\n        const timeOne = new Date();\n        const timeTwo = new Date(lastFetchTime);\n        const diff = this.timeDiffInMinutes(timeOne, timeTwo);*/\n\n        //todo logic to check user and count >15 && user !=Luke.. and lastFetch - current <=15 mins\n    }\n\n    initFetch = () => {\n        this.setState({planetsData: {}, isLoading: true,}, this.fetchPlanets)\n    };\n\n    fetchPlanets = async () => {\n        const {\n            searchText,\n            currentPage,\n        } = this.state;\n\n        if (searchText.length > 0) {\n            try {\n                const planetsData = await PlanetService.searchPlanets({searchText: searchText, page: currentPage});\n                this.setState(() => {\n                    return {\n                        planetsData: planetsData,\n                        isLoading: false\n                    }\n                });\n            } catch (fetchError) {\n                this.setState(() => {\n                    return {\n                        planetsData: {},\n                        isLoading: false\n                    }\n                });\n            }\n        } else {\n            this.setState(() => {\n                return {\n                    planetsData: {},\n                    isLoading: false\n                }\n            });\n        }\n    }\n\n    setPage = (pageNumber = 1) => {\n        this.setState({currentPage: pageNumber}, this.fetchPlanets)\n    }\n\n\n    render() {\n        let {logout, currentUser} = this.props;\n        const {\n            planetsData: {\n                results = [],\n                previous,\n                next\n            },\n            isLoading,\n            currentPage\n        } = this.state;\n        return (\n\n            <div>\n                <div>\n\n                    <nav className=\"navbar navbar-expand navbar-dark bg-dark\">\n                        <div className=\"navbar-nav\">\n                            <Link to=\"/\" className=\"nav-item nav-link\">Home</Link>\n                            <a  href=\"/\" onClick={logout} className=\"nav-item nav-link\">Logout</a>\n                        </div>\n                    </nav>\n\n                    <Jumbotron>\n                        <h1>Welcome {currentUser.name}</h1>\n                        <p>\n                            Start searching to explore the planets .\n                        </p>\n                    </Jumbotron>\n\n\n                    <Form inline>\n\n                    </Form>\n\n                    <InputGroup className=\"mb-3\">\n                        <InputGroup.Prepend>\n                            {/*eslint-disable-next-line*/}\n                            <InputGroup.Text id=\"basic-addon1\"><span role=\"img\">&#128270;</span></InputGroup.Text>\n                        </InputGroup.Prepend>\n                        <FormControl type=\"text\" onChange={this.setSearchText} placeholder=\"Search\"\n                                     className=\"mr-sm-2\"/>\n                    </InputGroup>\n\n                    {isLoading && <div>Loading...</div>}\n\n                    {results.length > 0 && < PlanetList list={results}/>\n                    }\n\n                    <div style={{\n                        diplay: 'flex', alignItems: 'center', justifyContent: 'center', margin: 'auto',\n                        width: '40%'\n                    }}>\n                        <Pagination>\n                            {/*TODO Pagination.*/}\n                            {previous && <Pagination.Prev onClick={() => {\n                                this.setPage(currentPage - 1)\n                            }}/>}\n                            {next && <Pagination.Next onClick={() => {\n                                this.setPage(currentPage + 1)\n                            }}/>}\n                        </Pagination>\n\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nHome.propTypes = {\n    logout: PropTypes.any,\n    currentUser: PropTypes.any\n}\n\nexport default Home;","import React, {useState} from \"react\";\nimport AuthService from \"../../service/AuthService\";\n\nconst Login = ({history}) => {\n    const [userName, setUserName] = useState('Luke Skywalker');\n    const [password, setPassword] = useState(\"19BBY\");\n    const [loading, setLoading] = useState(false);\n    const handleSubmit = async e => {\n        e.preventDefault();\n        setLoading(true);\n\n        const userInfo = await AuthService.login({\n            userName: userName,\n            password: password\n        });\n\n        console.log(userInfo);\n\n        // NOTE request to api login here instead of this fake promise\n        // await new Promise(r => setTimeout(r(), 1000));\n        history.push(\"/\");\n        setLoading(false);\n    };\n\n    if (loading) {\n        return <h4>Logging in...</h4>;\n    }\n\n    return (\n        <div style={{marginTop: \"1rem\"}}>\n            <form onSubmit={handleSubmit}>\n                <input\n                    type=\"text\"\n                    placeholder=\"Enter email address\"\n                    value={userName}\n                    onChange={e => setUserName(e.target.value)}\n                />\n                <input\n                    type=\"password\"\n                    placeholder=\"Enter email address\"\n                    value={password}\n                    onChange={e => setPassword(e.target.value)}\n                />\n                <input type=\"submit\" value=\"Login\"/>\n            </form>\n        </div>\n    );\n};\n\nexport default Login;","import React from 'react';\nimport { Route, Redirect } from 'react-router-dom';\nimport AuthService from \"../../service/AuthService\";\n\n\nexport const AuthRoute = ({ component: Component, logout,currentUser, ...rest }) => (\n    <Route {...rest} render={props => {\n        const currentUser = AuthService.getUserInfo();\n        if (!currentUser) {\n            // not logged in so redirect to login page with the return url\n            return <Redirect to={{ pathname: '/login', state: { from: props.location } }} />\n        }\n\n        // authorised so return component\n        return <Component {...props} logout={logout} currentUser={currentUser}/>\n    }} />\n);\n\nexport default AuthRoute;","import React from 'react';\nimport {Route, Router} from 'react-router-dom';\n\nimport AuthService from \"./service/AuthService\";\nimport Home from \"./components/Home\";\nimport Login from \"./components/Login\";\nimport AuthRoute from \"./components/AuthRoute/AuthRoute\";\nimport {createBrowserHistory} from 'history';\n\nexport const history = createBrowserHistory();\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            currentUser: null\n        };\n    }\n\n    updateUserInfo = () => {\n        this.setState(() => {\n            const userInfo = AuthService.getUserInfo();\n            return {\n                currentUser: userInfo\n            }\n        })\n    }\n\n    componentDidMount() {\n        this.updateUserInfo()\n    }\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        if ((prevState.currentUser && this.state.currentUser) && prevState.currentUser.name !== this.state.currentUser.name) {\n            this.updateUserInfo()\n        }\n    }\n\n    logout = () => {\n        AuthService.logout();\n        this.setState(() => {\n            return {\n                currentUser: null,\n            }\n        })\n        history.push('/login');\n    }\n\n    render() {\n        return (\n            <Router history={history}>\n                <AuthRoute exact path=\"/\" component={Home} logout={this.logout} />\n                <Route path=\"/login\" component={Login}/>\n            </Router>\n        );\n    }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}